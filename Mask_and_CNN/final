import sys
import torch
import os
import torchvision
import numpy as np
import matplotlib.pyplot as plt
from torchvision.models.detection import maskrcnn_resnet50_fpn
from torchvision.datasets import CocoDetection
import torchvision.transforms as T
from PIL import Image, ImageFile
from pathlib import Path
from . import mask as m
from . import models



ImageFile.LOAD_TRUNCATED_IMAGES = True  # Allow loading truncated images

def is_car_dirty(img, mask_model=maskrcnn_resnet50_fpn(weights='default'), determine_model=models.conv_4layer(weights='C:\Users\fooli\Desktop\image rec\RCNN-based-detection\best_model_car_masked_simple_80.84.pth'), threshold=0.7):

    mask = m.get_largest_car(img, mask_model, threshold)
    
    if mask is None:
        return False  # No car detected
    
    masked_image = m.mask_image(img, mask)
    
    # Prepare the masked image for classification
    transform = T.Compose([T.Resize((1024, 640)), T.ToTensor()])
    input_tensor = transform(masked_image).unsqueeze(0) 
    
    with torch.no_grad():
        output = determine_model(input_tensor)
    
    _, predicted = torch.max(output, 1)
    
    return predicted.item() == 1 


