from torch import nn
import torch.nn.functional as F


class conv_4layer(nn.Module):
    def __init__(self):
        super(conv_4layer, self).__init__()
        # Convolutional layers
        self.conv1 = nn.Conv2d(3, 6, 11, 4, 5)
        self.bn1 = nn.BatchNorm2d(6)
        self.conv2 = nn.Conv2d(6, 6, 5, 2, 2)
        self.bn2 = nn.BatchNorm2d(6)
        self.conv3 = nn.Conv2d(6, 8, 5, 1, 2)
        self.bn3 = nn.BatchNorm2d(8)
        self.conv4 = nn.Conv2d(8, 8, 5, 1, 2)
        self.bn4 = nn.BatchNorm2d(8)
        self.fc1 = nn.Linear(8*8*5, 16)
        self.fc2 = nn.Linear(16, 2)

        # Initialize weights
        for m in self.modules():
            if isinstance(m, nn.Conv2d):
                nn.init.kaiming_normal_(m.weight, mode='fan_out', nonlinearity='leaky_relu')
                if m.bias is not None:
                    nn.init.constant_(m.bias, 0)
            elif isinstance(m, nn.Linear):
                nn.init.kaiming_normal_(m.weight, mode='fan_out', nonlinearity='leaky_relu')
                nn.init.constant_(m.bias, 0)
            elif isinstance(m, nn.BatchNorm2d):
                nn.init.constant_(m.weight, 1)
                nn.init.constant_(m.bias, 0)

    def forward(self, x):
        x = F.leaky_relu(self.bn1(self.conv1(x)))
        x = F.max_pool2d(x, 2, 2)
        x = F.leaky_relu(self.bn2(self.conv2(x)))
        x = F.max_pool2d(x, 2, 2)
        x = F.leaky_relu(self.bn3(self.conv3(x)))
        x = F.max_pool2d(x, 2, 2)
        x = F.leaky_relu(self.bn4(self.conv4(x)))
        x = F.max_pool2d(x, 2, 2)
        x = x.view(x.size(0), -1) 
        if self.training:
            x = F.dropout(x, p=0.5)
        x = F.leaky_relu(self.fc1(x))
        x = F.leaky_relu(self.fc2(x))

        return x